name: 'Build and push arm64 + amd64 images'
description: 'IQGeo reusable action to build arm64 + amd64 images based on supplied parameters'

inputs:
  version:
    description: 'Version to build'
    required: true
    type: string
  tag:
    description: 'Unique number of Build ID for this workflow run'
    required: true
    type: string
  platform:
    description: 'Which OS arch to build this image on (amd64, arm64)'
    required: true
    type: string
  module:
    description: 'Module to build (product, devdb, editions)'
    required: true
    type: string
  dockerfile_path:
    description: 'Path to the dockerfile for this specific image build (injector, platform w/ module, editions)'
    required: true
    type: string
  docker_context:
    description: 'Build context for the docker image to reference'
    required: true
    type: string
  acr:
    description: 'IQGeos Azure container registry server name'
    required: true
    type: string
  registry_username:
    description: 'IQGeos Azure container registry username for logging into Azure'
    required: true
    type: string
  registry_password:
    description: 'IQGeos Azure container registry password for logging into Azure'
    required: true
    type: string
  harbor:
    description: 'IQGeos Harbor container registry server name'
    required: true
    type: string
  harbor_cli_secret:
    description: 'IQGeos Harbor container registry password for logging into Azure'
    required: true
    type: string
  harbor_username:
    description: 'IQGeos Harbor container registry username for logging into Azure'
    required: true
    type: string
  gh_token:
    description: 'GitHub token to clone repos from IQGeo org'
    required: true
    type: string

runs:
    using: "composite"
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main
        
      # - name: Checkout Product repo
      #   uses: actions/checkout@v4    
      #   with:
      #       path: ${{github.event.repository.name}}  
        
      - name: Checkout Language Packs
        uses: actions/checkout@v4
        with:
            repo: IQGeo/utils-language-packs
            path: utils-language-packs
            token: ${{ inputs.gh_token }}

    # make version dynamic
      - name: Copy Language Packs from utils-language-packs
        shell: bash
        run: |
            echo "Copying language packs from utils-language-packs"
            pwd
            ls -la
            echo "LANG_REPO=$GITHUB_WORKSPACE/utils-language-packs" >> $GITHUB_ENV
            echo "Language Pack Directory: $LANG_REPO"
            echo "Copy Language Packs from utils-language-packs repo"
            mkdir $GITHUB_WORKSPACE/$MODULE/v41/languagepacks
            cp -RT $LANG_REPO/$MODULE/v41 $GITHUB_WORKSPACE/$MODULE/v41/languagepacks/
            ls -la $GITHUB_WORKSPACE/$MODULE/v41/languagepacks/
        env:
          MODULE: ${{ inputs.module }}
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Create dir for binaries
        shell: bash
        run: |
            pwd
            ls -la
            echo "VERSION: $VERSION"
            echo "TAG: $TAG"
            mkdir -p $GITHUB_WORKSPACE/$MODULE/$VERSION
            ls -la $GITHUB_WORKSPACE/$MODULE
        env:
          VERSION: ${{ inputs.version }}
          ACR: ${{ inputs.acr }}
          TAG: ${{ inputs.tag }}
          MODULE: ${{ inputs.module }}
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Add logic/conditional here to only download artifacts for injector builds
      - uses: actions/download-artifact@v4
        with:
            name: binaries
            path: ${{ inputs.module }}

      - name: Display structure of downloaded files
        shell: bash
        run: ls -R $GITHUB_WORKSPACE/$MODULE
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          MODULE: ${{ inputs.module }}
        
      - name: build and push image (default context)
        shell: bash
        run: |
          docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASWORD $ACR
          docker login -u $HARBOR_USERNAME -p $HARBOR_CLI_SECRET $HARBOR
          docker build --build-arg MODULE=$MODULE --build-arg VERSION=$VERSION --build-arg CUTPATH=$MODULE -f $GITHUB_WORKSPACE/$DOCKERFILE $CONTEXT_BUILD -t $ACR/$MODULE:$TAG
          docker push $ACR/$MODULE:$TAG
        env:
          VERSION: ${{ inputs.version }}
          TAG: ${{ inputs.tag }}
          MODULE: ${{ inputs.module }}
          CONTEXT_BUILD: ${{ inputs.docker_context }}
          DOCKERFILE: ${{ inputs.dockerfile_path }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          HARBOR: ${{ inputs.harbor }}
          HARBOR_CLI_SECRET: ${{ inputs.harbor_cli_secret }}
          HARBOR_USERNAME: ${{ inputs.harbor_username }}
          ACR: ${{ inputs.acr }}
          REGISTRY_USERNAME: ${{ inputs.registry_username }}
          REGISTRY_PASWORD: ${{ inputs.registry_password}}
